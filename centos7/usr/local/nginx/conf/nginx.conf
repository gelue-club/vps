user nginx;

# Sets the worker threads to the number of CPU cores available in the system for best performance.
# Should be > the number of CPU cores.
# Maximum number of connections = worker_processes * worker_connections
worker_processes auto;

# Maximum number of open files per worker process.
# Should be > worker_connections.
worker_rlimit_nofile 65535;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

# Load dynamic modules. See /usr/share/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;


events {
  multi_accept on;
  # If you need more connections than this, you start optimizing your OS.
  # That's probably the point at which you hire people who are smarter than you as this is *a lot* of requests.
  # Should be < worker_rlimit_nofile.
  worker_connections 65535;
}


http {
	charset utf-8;
  log_not_found off;

  # Hide nginx version information.
  server_tokens off;

  # Specify MIME types for files.
  include       mime.types;
  default_type  application/octet-stream;

  # Update charset_types to match updated mime.types.
  # text/html is always included by charset module.
  charset_types
    text/css
    text/plain
    text/vnd.wap.wml
    application/javascript
    application/json
    application/rss+xml
    application/xml;

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

  # Nginx logs every request that hits the VPS to a log file.
  # If you use analytics to monitor this, you may want to turn this functionality off.
  # Simply edit the access_log directive: access_log off;
  access_log  /var/log/nginx/access.log  main;

  sendfile        on;
  tcp_nopush      on;
  tcp_nodelay     on;

  keepalive_timeout  65;
  types_hash_max_size 2048;
	client_max_body_size 16M;

  fastcgi_buffers 8 16k;
  fastcgi_buffer_size 32k;
  fastcgi_connect_timeout 300;
  fastcgi_send_timeout 300;
  fastcgi_read_timeout 300;



  gzip                 on;
  gzip_comp_level      6;
  gzip_vary            on;
  gzip_min_length      256;
  gzip_proxied         any;
  gzip_disable         "MSIE [1-6]\.";

  # Compress all output labeled with one of the following MIME-types.
  gzip_types
    application/atom+xml
    application/javascript
    application/json
    application/ld+json
    application/rss+xml
    application/vnd.geo+json
    application/vnd.ms-fontobject
    application/x-font-ttf
    application/xhtml+xml
    application/xml
    application/font-woff
    application/font-woff2
    application/pdf
    application/manifest+json
    application/x-web-app-manifest+json
    text/cache-manifest
    font/opentype
    image/jpeg
    image/png
    image/bmp
    image/svg+xml
    image/x-icon
    image/webp
    text/css
    text/plain
    text/vcard
    text/vnd.rim.location.xloc
    text/vtt
    text/x-component
    text/x-cross-domain-policy;
  # text/html is always compressed by gzip module

  # This should be turned on if you are going to have pre-compressed copies (.gz) of
  # static files available. If not it should be left off as it will cause extra I/O
  # for the check. It is best if you enable this in a location{} block for
  # a specific directory, or on an individual server{} level.
  gzip_static on;



  brotli             on;
  brotli_comp_level  6;
  brotli_types
    text/plain
    text/css
    text/xml
    font/opentype
    application/json
    application/x-javascript
    application/xml
    application/manifest+json
    application/xml+rss
    application/javascript
    application/font-woff
    application/font-woff2
    application/vnd.ms-fontobject
    application/x-font-ttf
    image/jpeg
    image/png
    image/bmp
    image/x-icon
    image/webp
    image/svg+xml
    text/x-cross-domain-policy;



  include /etc/nginx/conf.d/*.conf;

  proxy_cache_path /data/nginx/cache keys_zone=huso:10m;

  map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
  }



  # :::    ::: ::::::::::: ::::::::::: :::::::::
  # :+:    :+:     :+:         :+:     :+:    :+:
  # +:+    +:+     +:+         +:+     +:+    +:+
  # +#++:++#++     +#+         +#+     +#++:++#+
  # +#+    +#+     +#+         +#+     +#+
  # #+#    #+#     #+#         #+#     #+#
  # ###    ###     ###         ###     ###

  server {
    listen 80;
    listen [::]:80;
    server_name
      gelue.club;

    return 301 https://$host$request_uri;
  }



  # :::    ::: ::::::::::: ::::::::::: :::::::::   ::::::::
  # :+:    :+:     :+:         :+:     :+:    :+: :+:    :+:
  # +:+    +:+     +:+         +:+     +:+    +:+ +:+
  # +#++:++#++     +#+         +#+     +#++:++#+  +#++:++#++
  # +#+    +#+     +#+         +#+     +#+               +#+
  # #+#    #+#     #+#         #+#     #+#        #+#    #+#
  # ###    ###     ###         ###     ###         ########

  server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name             gelue.club;

    # Mozilla Old configuration
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA;
    ssl_prefer_server_ciphers on;

    ssl_certificate           /etc/letsencrypt/live/gelue.club/fullchain.pem;
    ssl_certificate_key       /etc/letsencrypt/live/gelue.club/privkey.pem;
    ssl_trusted_certificate   /etc/letsencrypt/live/gelue.club/fullchain.pem;

    ssl_session_cache         shared:SSL:10m;
    ssl_session_tickets       off;
    ssl_session_timeout       1d;

    ssl_ct                    on;
    ssl_ct_static_scts        /usr/pro/scts/gelue_club;

    # OCSP Stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 1.1.1.1 1.0.0.1 8.8.8.8 8.8.4.4 208.67.222.222 208.67.220.220 valid=60s;
    resolver_timeout 2s;

    proxy_cache huso;

    # pagespeed
    pagespeed on;
    pagespeed FileCachePath /var/ngx_pagespeed_cache;
    pagespeed EnableFilters convert_jpeg_to_webp;
    pagespeed JpegRecompressionQuality 80;
    pagespeed EnableFilters collapse_whitespace;
    pagespeed EnableFilters hint_preload_subresources;
    pagespeed EnableFilters insert_dns_prefetch;
    pagespeed EnableFilters prioritize_critical_css;
    pagespeed EnableFilters combine_css;
    pagespeed EnableFilters combine_javascript;

    add_header "X-UA-Compatible" "IE=Edge";

    add_header "Cache-Control" "max-age=31536000";

    # security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    root         /usr/pro/gelue.club/;

    location / {
      try_files $uri /index.html;
    }

    location /activity {
      try_files $uri /activity/index.html;
    }

    location /books {
      try_files $uri /books/index.html;
    }

    location /concept {
      try_files $uri /concept/index.html;
    }

    location /faq {
      try_files $uri /faq/index.html;
    }

    location /intention {
      try_files $uri /intention/index.html;
    }

    location /intro {
      try_files $uri /intro/index.html;
    }

    location /people {
      try_files $uri /people/index.html;
    }

    location /serial-109262019 {
      try_files $uri /serial-109262019/index.html;
    }

    location /tags {
      try_files $uri /tags/index.html;
    }

    location /vision {
      try_files $uri /vision/index.html;
    }

    location /way {
      try_files $uri /way/index.html;
    }

    location /gitignore {
      try_files $uri /gitignore/index.html;
    }

    location /sw.js {
      add_header Cache-Control "no-cache";
      proxy_cache_bypass $http_pragma;
      proxy_cache_revalidate on;
      proxy_cache huso;
      expires off;
      access_log off;
    }

    # Prevent clients from accessing hidden files (starting with a dot)
    # This is particularly important if you store .htpasswd files in the site hierarchy
    # Access to `/.well-known/` is allowed.
    # https://www.mnot.net/blog/2010/04/07/well-known
    # https://tools.ietf.org/html/rfc5785
    location ~* /\.(?!well-known\/) {
      deny all;
    }

    # Prevent clients from accessing to backup/config/source files
    location ~* (?:\.(?:bak|conf|dist|fla|in[ci]|log|psd|sh|sql|sw[op])|~)$ {
      deny all;
    }

    # assets, media
    location ~* \.(?:css(\.map)?|js(\.map)?|jpe?g|png|gif|ico|cur|heic|webp|tiff?|mp3|m4a|aac|ogg|midi?|wav|mp4|mov|webm|mpe?g|avi|ogv|flv|wmv)$ {
      expires 1d;
      access_log off;
    }

    # svg, fonts
    location ~* \.(?:svgz?|ttf|ttc|otf|eot|woff2?)$ {
      add_header Access-Control-Allow-Origin "*";
      expires 7d;
      access_log off;
    }

    # favicon.ico
    location = /favicon.ico {
      log_not_found off;
      access_log off;
    }

    # robots.txt
    location = /robots.txt {
      log_not_found off;
      access_log off;
    }
  }
}
